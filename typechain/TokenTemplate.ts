/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TokenTemplate {
  export type VestingScheduleStruct = {
    beneficiary: AddressLike;
    cliff: BigNumberish;
    start: BigNumberish;
    duration: BigNumberish;
    releasedAmount: BigNumberish;
    amountTotal: BigNumberish;
    revocable: boolean;
    revoked: boolean;
  };

  export type VestingScheduleStructOutput = [
    beneficiary: string,
    cliff: bigint,
    start: bigint,
    duration: bigint,
    releasedAmount: bigint,
    amountTotal: bigint,
    revocable: boolean,
    revoked: boolean
  ] & {
    beneficiary: string;
    cliff: bigint;
    start: bigint;
    duration: bigint;
    releasedAmount: bigint;
    amountTotal: bigint;
    revocable: boolean;
    revoked: boolean;
  };
}

export interface TokenTemplateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnEnabled"
      | "burnFrom"
      | "calculateOwnerPercentage"
      | "computeReleasableAmount"
      | "computeVestingScheduleIdForAddressAndIndex"
      | "contractLocked"
      | "createVestingSchedule"
      | "decimals"
      | "decreaseAllowance"
      | "description"
      | "getTornadoDenomination"
      | "getVestingSchedule"
      | "getVestingSchedulesCount"
      | "getVestingSchedulesTotalAmount"
      | "increaseAllowance"
      | "initialize"
      | "liquidityLockEndTime"
      | "liquidityLockPeriod"
      | "liquidityPool"
      | "lockContract"
      | "lockLiquidity"
      | "mint"
      | "name"
      | "owner"
      | "release"
      | "renounceOwnership"
      | "revoke"
      | "setBurnEnabled"
      | "symbol"
      | "taxRate"
      | "taxRecipient"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unlockLiquidity"
      | "updateDescription"
      | "updateTaxRate"
      | "updateTaxRecipient"
      | "vestingEnabled"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BurnEnabledUpdated"
      | "ContractLocked"
      | "DescriptionUpdated"
      | "Initialized"
      | "LiquidityLocked"
      | "LiquidityUnlocked"
      | "OwnershipTransferred"
      | "TaxRateUpdated"
      | "TaxRecipientUpdated"
      | "TokenDistribution"
      | "Transfer"
      | "VestingReleased"
      | "VestingScheduleCreated"
      | "VestingScheduleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOwnerPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeReleasableAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createVestingSchedule",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTornadoDenomination",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      AddressLike,
      string,
      BigNumberish,
      AddressLike,
      boolean,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLockEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setBurnEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTaxRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateOwnerPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTornadoDenomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLockEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBurnEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTaxRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEnabledUpdatedEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractLockedEvent {
  export type InputTuple = [locked: boolean];
  export type OutputTuple = [locked: boolean];
  export interface OutputObject {
    locked: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DescriptionUpdatedEvent {
  export type InputTuple = [oldDescription: string, newDescription: string];
  export type OutputTuple = [oldDescription: string, newDescription: string];
  export interface OutputObject {
    oldDescription: string;
    newDescription: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [
    name: string,
    symbol: string,
    initialSupply: bigint,
    owner: string
  ];
  export interface OutputObject {
    name: string;
    symbol: string;
    initialSupply: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityLockedEvent {
  export type InputTuple = [
    liquidityPool: AddressLike,
    unlockTime: BigNumberish
  ];
  export type OutputTuple = [liquidityPool: string, unlockTime: bigint];
  export interface OutputObject {
    liquidityPool: string;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityUnlockedEvent {
  export type InputTuple = [liquidityPool: AddressLike];
  export type OutputTuple = [liquidityPool: string];
  export interface OutputObject {
    liquidityPool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaxRateUpdatedEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaxRecipientUpdatedEvent {
  export type InputTuple = [
    oldRecipient: AddressLike,
    newRecipient: AddressLike
  ];
  export type OutputTuple = [oldRecipient: string, newRecipient: string];
  export interface OutputObject {
    oldRecipient: string;
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDistributionEvent {
  export type InputTuple = [
    ownerAmount: BigNumberish,
    contractAmount: BigNumberish,
    ownerPercentage: BigNumberish
  ];
  export type OutputTuple = [
    ownerAmount: bigint,
    contractAmount: bigint,
    ownerPercentage: bigint
  ];
  export interface OutputObject {
    ownerAmount: bigint;
    contractAmount: bigint;
    ownerPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingReleasedEvent {
  export type InputTuple = [vestingScheduleId: BytesLike, amount: BigNumberish];
  export type OutputTuple = [vestingScheduleId: string, amount: bigint];
  export interface OutputObject {
    vestingScheduleId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingScheduleCreatedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    start: BigNumberish,
    cliff: BigNumberish,
    duration: BigNumberish,
    revocable: boolean
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    start: bigint,
    cliff: bigint,
    duration: bigint,
    revocable: boolean
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    start: bigint;
    cliff: bigint;
    duration: bigint;
    revocable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingScheduleRevokedEvent {
  export type InputTuple = [vestingScheduleId: BytesLike];
  export type OutputTuple = [vestingScheduleId: string];
  export interface OutputObject {
    vestingScheduleId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenTemplate extends BaseContract {
  connect(runner?: ContractRunner | null): TokenTemplate;
  waitForDeployment(): Promise<this>;

  interface: TokenTemplateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  burnEnabled: TypedContractMethod<[], [boolean], "view">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateOwnerPercentage: TypedContractMethod<
    [ethAmount: BigNumberish],
    [bigint],
    "view"
  >;

  computeReleasableAmount: TypedContractMethod<
    [vestingScheduleId: BytesLike],
    [bigint],
    "view"
  >;

  computeVestingScheduleIdForAddressAndIndex: TypedContractMethod<
    [holder: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  contractLocked: TypedContractMethod<[], [boolean], "view">;

  createVestingSchedule: TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  description: TypedContractMethod<[], [string], "view">;

  getTornadoDenomination: TypedContractMethod<
    [ghostPadAddress: AddressLike],
    [bigint],
    "view"
  >;

  getVestingSchedule: TypedContractMethod<
    [vestingScheduleId: BytesLike],
    [TokenTemplate.VestingScheduleStructOutput],
    "view"
  >;

  getVestingSchedulesCount: TypedContractMethod<[], [bigint], "view">;

  getVestingSchedulesTotalAmount: TypedContractMethod<[], [bigint], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      owner: AddressLike,
      _description: string,
      _taxRate: BigNumberish,
      _taxRecipient: AddressLike,
      _burnEnabled: boolean,
      _liquidityLockPeriod: BigNumberish,
      _vestingEnabled: boolean
    ],
    [void],
    "nonpayable"
  >;

  liquidityLockEndTime: TypedContractMethod<[], [bigint], "view">;

  liquidityLockPeriod: TypedContractMethod<[], [bigint], "view">;

  liquidityPool: TypedContractMethod<[], [string], "view">;

  lockContract: TypedContractMethod<[], [void], "nonpayable">;

  lockLiquidity: TypedContractMethod<
    [_liquidityPool: AddressLike],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  release: TypedContractMethod<
    [vestingScheduleId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revoke: TypedContractMethod<
    [vestingScheduleId: BytesLike],
    [void],
    "nonpayable"
  >;

  setBurnEnabled: TypedContractMethod<[enabled: boolean], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  taxRate: TypedContractMethod<[], [bigint], "view">;

  taxRecipient: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockLiquidity: TypedContractMethod<[], [void], "nonpayable">;

  updateDescription: TypedContractMethod<
    [newDescription: string],
    [void],
    "nonpayable"
  >;

  updateTaxRate: TypedContractMethod<
    [newTaxRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTaxRecipient: TypedContractMethod<
    [newTaxRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  vestingEnabled: TypedContractMethod<[], [boolean], "view">;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateOwnerPercentage"
  ): TypedContractMethod<[ethAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "computeReleasableAmount"
  ): TypedContractMethod<[vestingScheduleId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "computeVestingScheduleIdForAddressAndIndex"
  ): TypedContractMethod<
    [holder: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractLocked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "createVestingSchedule"
  ): TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTornadoDenomination"
  ): TypedContractMethod<[ghostPadAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedule"
  ): TypedContractMethod<
    [vestingScheduleId: BytesLike],
    [TokenTemplate.VestingScheduleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVestingSchedulesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedulesTotalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      owner: AddressLike,
      _description: string,
      _taxRate: BigNumberish,
      _taxRecipient: AddressLike,
      _burnEnabled: boolean,
      _liquidityLockPeriod: BigNumberish,
      _vestingEnabled: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidityLockEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityLockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lockContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockLiquidity"
  ): TypedContractMethod<[_liquidityPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<
    [vestingScheduleId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<[vestingScheduleId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBurnEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taxRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDescription"
  ): TypedContractMethod<[newDescription: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTaxRate"
  ): TypedContractMethod<[newTaxRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTaxRecipient"
  ): TypedContractMethod<[newTaxRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vestingEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BurnEnabledUpdated"
  ): TypedContractEvent<
    BurnEnabledUpdatedEvent.InputTuple,
    BurnEnabledUpdatedEvent.OutputTuple,
    BurnEnabledUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractLocked"
  ): TypedContractEvent<
    ContractLockedEvent.InputTuple,
    ContractLockedEvent.OutputTuple,
    ContractLockedEvent.OutputObject
  >;
  getEvent(
    key: "DescriptionUpdated"
  ): TypedContractEvent<
    DescriptionUpdatedEvent.InputTuple,
    DescriptionUpdatedEvent.OutputTuple,
    DescriptionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityLocked"
  ): TypedContractEvent<
    LiquidityLockedEvent.InputTuple,
    LiquidityLockedEvent.OutputTuple,
    LiquidityLockedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityUnlocked"
  ): TypedContractEvent<
    LiquidityUnlockedEvent.InputTuple,
    LiquidityUnlockedEvent.OutputTuple,
    LiquidityUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TaxRateUpdated"
  ): TypedContractEvent<
    TaxRateUpdatedEvent.InputTuple,
    TaxRateUpdatedEvent.OutputTuple,
    TaxRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TaxRecipientUpdated"
  ): TypedContractEvent<
    TaxRecipientUpdatedEvent.InputTuple,
    TaxRecipientUpdatedEvent.OutputTuple,
    TaxRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDistribution"
  ): TypedContractEvent<
    TokenDistributionEvent.InputTuple,
    TokenDistributionEvent.OutputTuple,
    TokenDistributionEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "VestingReleased"
  ): TypedContractEvent<
    VestingReleasedEvent.InputTuple,
    VestingReleasedEvent.OutputTuple,
    VestingReleasedEvent.OutputObject
  >;
  getEvent(
    key: "VestingScheduleCreated"
  ): TypedContractEvent<
    VestingScheduleCreatedEvent.InputTuple,
    VestingScheduleCreatedEvent.OutputTuple,
    VestingScheduleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VestingScheduleRevoked"
  ): TypedContractEvent<
    VestingScheduleRevokedEvent.InputTuple,
    VestingScheduleRevokedEvent.OutputTuple,
    VestingScheduleRevokedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BurnEnabledUpdated(bool)": TypedContractEvent<
      BurnEnabledUpdatedEvent.InputTuple,
      BurnEnabledUpdatedEvent.OutputTuple,
      BurnEnabledUpdatedEvent.OutputObject
    >;
    BurnEnabledUpdated: TypedContractEvent<
      BurnEnabledUpdatedEvent.InputTuple,
      BurnEnabledUpdatedEvent.OutputTuple,
      BurnEnabledUpdatedEvent.OutputObject
    >;

    "ContractLocked(bool)": TypedContractEvent<
      ContractLockedEvent.InputTuple,
      ContractLockedEvent.OutputTuple,
      ContractLockedEvent.OutputObject
    >;
    ContractLocked: TypedContractEvent<
      ContractLockedEvent.InputTuple,
      ContractLockedEvent.OutputTuple,
      ContractLockedEvent.OutputObject
    >;

    "DescriptionUpdated(string,string)": TypedContractEvent<
      DescriptionUpdatedEvent.InputTuple,
      DescriptionUpdatedEvent.OutputTuple,
      DescriptionUpdatedEvent.OutputObject
    >;
    DescriptionUpdated: TypedContractEvent<
      DescriptionUpdatedEvent.InputTuple,
      DescriptionUpdatedEvent.OutputTuple,
      DescriptionUpdatedEvent.OutputObject
    >;

    "Initialized(string,string,uint256,address)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidityLocked(address,uint256)": TypedContractEvent<
      LiquidityLockedEvent.InputTuple,
      LiquidityLockedEvent.OutputTuple,
      LiquidityLockedEvent.OutputObject
    >;
    LiquidityLocked: TypedContractEvent<
      LiquidityLockedEvent.InputTuple,
      LiquidityLockedEvent.OutputTuple,
      LiquidityLockedEvent.OutputObject
    >;

    "LiquidityUnlocked(address)": TypedContractEvent<
      LiquidityUnlockedEvent.InputTuple,
      LiquidityUnlockedEvent.OutputTuple,
      LiquidityUnlockedEvent.OutputObject
    >;
    LiquidityUnlocked: TypedContractEvent<
      LiquidityUnlockedEvent.InputTuple,
      LiquidityUnlockedEvent.OutputTuple,
      LiquidityUnlockedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TaxRateUpdated(uint256,uint256)": TypedContractEvent<
      TaxRateUpdatedEvent.InputTuple,
      TaxRateUpdatedEvent.OutputTuple,
      TaxRateUpdatedEvent.OutputObject
    >;
    TaxRateUpdated: TypedContractEvent<
      TaxRateUpdatedEvent.InputTuple,
      TaxRateUpdatedEvent.OutputTuple,
      TaxRateUpdatedEvent.OutputObject
    >;

    "TaxRecipientUpdated(address,address)": TypedContractEvent<
      TaxRecipientUpdatedEvent.InputTuple,
      TaxRecipientUpdatedEvent.OutputTuple,
      TaxRecipientUpdatedEvent.OutputObject
    >;
    TaxRecipientUpdated: TypedContractEvent<
      TaxRecipientUpdatedEvent.InputTuple,
      TaxRecipientUpdatedEvent.OutputTuple,
      TaxRecipientUpdatedEvent.OutputObject
    >;

    "TokenDistribution(uint256,uint256,uint256)": TypedContractEvent<
      TokenDistributionEvent.InputTuple,
      TokenDistributionEvent.OutputTuple,
      TokenDistributionEvent.OutputObject
    >;
    TokenDistribution: TypedContractEvent<
      TokenDistributionEvent.InputTuple,
      TokenDistributionEvent.OutputTuple,
      TokenDistributionEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "VestingReleased(bytes32,uint256)": TypedContractEvent<
      VestingReleasedEvent.InputTuple,
      VestingReleasedEvent.OutputTuple,
      VestingReleasedEvent.OutputObject
    >;
    VestingReleased: TypedContractEvent<
      VestingReleasedEvent.InputTuple,
      VestingReleasedEvent.OutputTuple,
      VestingReleasedEvent.OutputObject
    >;

    "VestingScheduleCreated(address,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;
    VestingScheduleCreated: TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;

    "VestingScheduleRevoked(bytes32)": TypedContractEvent<
      VestingScheduleRevokedEvent.InputTuple,
      VestingScheduleRevokedEvent.OutputTuple,
      VestingScheduleRevokedEvent.OutputObject
    >;
    VestingScheduleRevoked: TypedContractEvent<
      VestingScheduleRevokedEvent.InputTuple,
      VestingScheduleRevokedEvent.OutputTuple,
      VestingScheduleRevokedEvent.OutputObject
    >;
  };
}
