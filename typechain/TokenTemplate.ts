/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace TokenTemplate {
  export type VestingScheduleStruct = {
    beneficiary: string;
    cliff: BigNumberish;
    start: BigNumberish;
    duration: BigNumberish;
    releasedAmount: BigNumberish;
    amountTotal: BigNumberish;
    revocable: boolean;
    revoked: boolean;
  };

  export type VestingScheduleStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    beneficiary: string;
    cliff: BigNumber;
    start: BigNumber;
    duration: BigNumber;
    releasedAmount: BigNumber;
    amountTotal: BigNumber;
    revocable: boolean;
    revoked: boolean;
  };
}

export interface TokenTemplateInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnEnabled()": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "computeReleasableAmount(bytes32)": FunctionFragment;
    "computeVestingScheduleIdForAddressAndIndex(address,uint256)": FunctionFragment;
    "contractLocked()": FunctionFragment;
    "createVestingSchedule(address,uint256,uint256,uint256,bool,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "description()": FunctionFragment;
    "getVestingSchedule(bytes32)": FunctionFragment;
    "getVestingSchedulesCount()": FunctionFragment;
    "getVestingSchedulesTotalAmount()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string,string,uint256,address,string,uint256,address,bool,uint256,bool)": FunctionFragment;
    "liquidityLockEndTime()": FunctionFragment;
    "liquidityLockPeriod()": FunctionFragment;
    "liquidityPool()": FunctionFragment;
    "lockContract()": FunctionFragment;
    "lockLiquidity(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "release(bytes32,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "setBurnEnabled(bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "taxRate()": FunctionFragment;
    "taxRecipient()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockLiquidity()": FunctionFragment;
    "updateDescription(string)": FunctionFragment;
    "updateTaxRate(uint256)": FunctionFragment;
    "updateTaxRecipient(address)": FunctionFragment;
    "vestingEnabled()": FunctionFragment;
    "withdrawToken(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnEnabled"
      | "burnFrom"
      | "computeReleasableAmount"
      | "computeVestingScheduleIdForAddressAndIndex"
      | "contractLocked"
      | "createVestingSchedule"
      | "decimals"
      | "decreaseAllowance"
      | "description"
      | "getVestingSchedule"
      | "getVestingSchedulesCount"
      | "getVestingSchedulesTotalAmount"
      | "increaseAllowance"
      | "initialize"
      | "liquidityLockEndTime"
      | "liquidityLockPeriod"
      | "liquidityPool"
      | "lockContract"
      | "lockLiquidity"
      | "mint"
      | "name"
      | "owner"
      | "release"
      | "renounceOwnership"
      | "revoke"
      | "setBurnEnabled"
      | "symbol"
      | "taxRate"
      | "taxRecipient"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unlockLiquidity"
      | "updateDescription"
      | "updateTaxRate"
      | "updateTaxRecipient"
      | "vestingEnabled"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeReleasableAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createVestingSchedule",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      string,
      boolean,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLockEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setBurnEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTaxRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLockEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBurnEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTaxRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BurnEnabledUpdated(bool)": EventFragment;
    "ContractLocked(bool)": EventFragment;
    "DescriptionUpdated(string,string)": EventFragment;
    "Initialized(string,string,uint256,address)": EventFragment;
    "LiquidityLocked(address,uint256)": EventFragment;
    "LiquidityUnlocked(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TaxRateUpdated(uint256,uint256)": EventFragment;
    "TaxRecipientUpdated(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VestingReleased(bytes32,uint256)": EventFragment;
    "VestingScheduleCreated(address,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "VestingScheduleRevoked(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnEnabledUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DescriptionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxRecipientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingScheduleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingScheduleRevoked"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEnabledUpdatedEventObject {
  enabled: boolean;
}
export type BurnEnabledUpdatedEvent = TypedEvent<
  [boolean],
  BurnEnabledUpdatedEventObject
>;

export type BurnEnabledUpdatedEventFilter =
  TypedEventFilter<BurnEnabledUpdatedEvent>;

export interface ContractLockedEventObject {
  locked: boolean;
}
export type ContractLockedEvent = TypedEvent<
  [boolean],
  ContractLockedEventObject
>;

export type ContractLockedEventFilter = TypedEventFilter<ContractLockedEvent>;

export interface DescriptionUpdatedEventObject {
  oldDescription: string;
  newDescription: string;
}
export type DescriptionUpdatedEvent = TypedEvent<
  [string, string],
  DescriptionUpdatedEventObject
>;

export type DescriptionUpdatedEventFilter =
  TypedEventFilter<DescriptionUpdatedEvent>;

export interface InitializedEventObject {
  name: string;
  symbol: string;
  initialSupply: BigNumber;
  owner: string;
}
export type InitializedEvent = TypedEvent<
  [string, string, BigNumber, string],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidityLockedEventObject {
  liquidityPool: string;
  unlockTime: BigNumber;
}
export type LiquidityLockedEvent = TypedEvent<
  [string, BigNumber],
  LiquidityLockedEventObject
>;

export type LiquidityLockedEventFilter = TypedEventFilter<LiquidityLockedEvent>;

export interface LiquidityUnlockedEventObject {
  liquidityPool: string;
}
export type LiquidityUnlockedEvent = TypedEvent<
  [string],
  LiquidityUnlockedEventObject
>;

export type LiquidityUnlockedEventFilter =
  TypedEventFilter<LiquidityUnlockedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TaxRateUpdatedEventObject {
  oldRate: BigNumber;
  newRate: BigNumber;
}
export type TaxRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TaxRateUpdatedEventObject
>;

export type TaxRateUpdatedEventFilter = TypedEventFilter<TaxRateUpdatedEvent>;

export interface TaxRecipientUpdatedEventObject {
  oldRecipient: string;
  newRecipient: string;
}
export type TaxRecipientUpdatedEvent = TypedEvent<
  [string, string],
  TaxRecipientUpdatedEventObject
>;

export type TaxRecipientUpdatedEventFilter =
  TypedEventFilter<TaxRecipientUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VestingReleasedEventObject {
  vestingScheduleId: string;
  amount: BigNumber;
}
export type VestingReleasedEvent = TypedEvent<
  [string, BigNumber],
  VestingReleasedEventObject
>;

export type VestingReleasedEventFilter = TypedEventFilter<VestingReleasedEvent>;

export interface VestingScheduleCreatedEventObject {
  beneficiary: string;
  amount: BigNumber;
  start: BigNumber;
  cliff: BigNumber;
  duration: BigNumber;
  revocable: boolean;
}
export type VestingScheduleCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  VestingScheduleCreatedEventObject
>;

export type VestingScheduleCreatedEventFilter =
  TypedEventFilter<VestingScheduleCreatedEvent>;

export interface VestingScheduleRevokedEventObject {
  vestingScheduleId: string;
}
export type VestingScheduleRevokedEvent = TypedEvent<
  [string],
  VestingScheduleRevokedEventObject
>;

export type VestingScheduleRevokedEventFilter =
  TypedEventFilter<VestingScheduleRevokedEvent>;

export interface TokenTemplate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenTemplateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    burnEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    computeReleasableAmount(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeVestingScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contractLocked(overrides?: CallOverrides): Promise<[boolean]>;

    createVestingSchedule(
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    description(overrides?: CallOverrides): Promise<[string]>;

    getVestingSchedule(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[TokenTemplate.VestingScheduleStructOutput]>;

    getVestingSchedulesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      owner: string,
      _description: string,
      _taxRate: BigNumberish,
      _taxRecipient: string,
      _burnEnabled: boolean,
      _liquidityLockPeriod: BigNumberish,
      _vestingEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidityLockEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityPool(overrides?: CallOverrides): Promise<[string]>;

    lockContract(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lockLiquidity(
      _liquidityPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    release(
      vestingScheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revoke(
      vestingScheduleId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBurnEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    taxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxRecipient(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unlockLiquidity(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDescription(
      newDescription: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTaxRate(
      newTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTaxRecipient(
      newTaxRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vestingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  burnEnabled(overrides?: CallOverrides): Promise<boolean>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  computeReleasableAmount(
    vestingScheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeVestingScheduleIdForAddressAndIndex(
    holder: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  contractLocked(overrides?: CallOverrides): Promise<boolean>;

  createVestingSchedule(
    _beneficiary: string,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _duration: BigNumberish,
    _revocable: boolean,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  description(overrides?: CallOverrides): Promise<string>;

  getVestingSchedule(
    vestingScheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<TokenTemplate.VestingScheduleStructOutput>;

  getVestingSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

  getVestingSchedulesTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    owner: string,
    _description: string,
    _taxRate: BigNumberish,
    _taxRecipient: string,
    _burnEnabled: boolean,
    _liquidityLockPeriod: BigNumberish,
    _vestingEnabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidityLockEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityPool(overrides?: CallOverrides): Promise<string>;

  lockContract(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lockLiquidity(
    _liquidityPool: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  release(
    vestingScheduleId: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revoke(
    vestingScheduleId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBurnEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  taxRate(overrides?: CallOverrides): Promise<BigNumber>;

  taxRecipient(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unlockLiquidity(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDescription(
    newDescription: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTaxRate(
    newTaxRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTaxRecipient(
    newTaxRecipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vestingEnabled(overrides?: CallOverrides): Promise<boolean>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnEnabled(overrides?: CallOverrides): Promise<boolean>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    computeReleasableAmount(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeVestingScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    contractLocked(overrides?: CallOverrides): Promise<boolean>;

    createVestingSchedule(
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    description(overrides?: CallOverrides): Promise<string>;

    getVestingSchedule(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<TokenTemplate.VestingScheduleStructOutput>;

    getVestingSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      owner: string,
      _description: string,
      _taxRate: BigNumberish,
      _taxRecipient: string,
      _burnEnabled: boolean,
      _liquidityLockPeriod: BigNumberish,
      _vestingEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityLockEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPool(overrides?: CallOverrides): Promise<string>;

    lockContract(overrides?: CallOverrides): Promise<void>;

    lockLiquidity(
      _liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    release(
      vestingScheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setBurnEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    taxRecipient(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockLiquidity(overrides?: CallOverrides): Promise<void>;

    updateDescription(
      newDescription: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTaxRate(
      newTaxRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTaxRecipient(
      newTaxRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingEnabled(overrides?: CallOverrides): Promise<boolean>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BurnEnabledUpdated(bool)"(enabled?: null): BurnEnabledUpdatedEventFilter;
    BurnEnabledUpdated(enabled?: null): BurnEnabledUpdatedEventFilter;

    "ContractLocked(bool)"(locked?: null): ContractLockedEventFilter;
    ContractLocked(locked?: null): ContractLockedEventFilter;

    "DescriptionUpdated(string,string)"(
      oldDescription?: null,
      newDescription?: null
    ): DescriptionUpdatedEventFilter;
    DescriptionUpdated(
      oldDescription?: null,
      newDescription?: null
    ): DescriptionUpdatedEventFilter;

    "Initialized(string,string,uint256,address)"(
      name?: null,
      symbol?: null,
      initialSupply?: null,
      owner?: null
    ): InitializedEventFilter;
    Initialized(
      name?: null,
      symbol?: null,
      initialSupply?: null,
      owner?: null
    ): InitializedEventFilter;

    "LiquidityLocked(address,uint256)"(
      liquidityPool?: null,
      unlockTime?: null
    ): LiquidityLockedEventFilter;
    LiquidityLocked(
      liquidityPool?: null,
      unlockTime?: null
    ): LiquidityLockedEventFilter;

    "LiquidityUnlocked(address)"(
      liquidityPool?: null
    ): LiquidityUnlockedEventFilter;
    LiquidityUnlocked(liquidityPool?: null): LiquidityUnlockedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TaxRateUpdated(uint256,uint256)"(
      oldRate?: null,
      newRate?: null
    ): TaxRateUpdatedEventFilter;
    TaxRateUpdated(oldRate?: null, newRate?: null): TaxRateUpdatedEventFilter;

    "TaxRecipientUpdated(address,address)"(
      oldRecipient?: null,
      newRecipient?: null
    ): TaxRecipientUpdatedEventFilter;
    TaxRecipientUpdated(
      oldRecipient?: null,
      newRecipient?: null
    ): TaxRecipientUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "VestingReleased(bytes32,uint256)"(
      vestingScheduleId?: null,
      amount?: null
    ): VestingReleasedEventFilter;
    VestingReleased(
      vestingScheduleId?: null,
      amount?: null
    ): VestingReleasedEventFilter;

    "VestingScheduleCreated(address,uint256,uint256,uint256,uint256,bool)"(
      beneficiary?: null,
      amount?: null,
      start?: null,
      cliff?: null,
      duration?: null,
      revocable?: null
    ): VestingScheduleCreatedEventFilter;
    VestingScheduleCreated(
      beneficiary?: null,
      amount?: null,
      start?: null,
      cliff?: null,
      duration?: null,
      revocable?: null
    ): VestingScheduleCreatedEventFilter;

    "VestingScheduleRevoked(bytes32)"(
      vestingScheduleId?: null
    ): VestingScheduleRevokedEventFilter;
    VestingScheduleRevoked(
      vestingScheduleId?: null
    ): VestingScheduleRevokedEventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    burnEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    computeReleasableAmount(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeVestingScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractLocked(overrides?: CallOverrides): Promise<BigNumber>;

    createVestingSchedule(
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingSchedule(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      owner: string,
      _description: string,
      _taxRate: BigNumberish,
      _taxRecipient: string,
      _burnEnabled: boolean,
      _liquidityLockPeriod: BigNumberish,
      _vestingEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidityLockEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    lockContract(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    lockLiquidity(
      _liquidityPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      vestingScheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revoke(
      vestingScheduleId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBurnEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    taxRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unlockLiquidity(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDescription(
      newDescription: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTaxRate(
      newTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTaxRecipient(
      newTaxRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vestingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    burnEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    computeReleasableAmount(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeVestingScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVestingSchedule(
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVestingSchedule(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedulesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      owner: string,
      _description: string,
      _taxRate: BigNumberish,
      _taxRecipient: string,
      _burnEnabled: boolean,
      _liquidityLockPeriod: BigNumberish,
      _vestingEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidityLockEndTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityLockPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockContract(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lockLiquidity(
      _liquidityPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      vestingScheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revoke(
      vestingScheduleId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBurnEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unlockLiquidity(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDescription(
      newDescription: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTaxRate(
      newTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTaxRecipient(
      newTaxRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vestingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
