/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface UniswapHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "createPair"
      | "getLiquidityInfo"
      | "liquidityInfo"
      | "owner"
      | "pairExists"
      | "renounceOwnership"
      | "transferLPTokens"
      | "transferOwnership"
      | "uniswapFactoryAddress"
      | "uniswapRouterAddress"
      | "wethAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidityAdded"
      | "LiquidityLocked"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairExists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferLPTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    token: AddressLike,
    pair: AddressLike,
    amountToken: BigNumberish,
    amountETH: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    pair: string,
    amountToken: bigint,
    amountETH: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    token: string;
    pair: string;
    amountToken: bigint;
    amountETH: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityLockedEvent {
  export type InputTuple = [
    token: AddressLike,
    pair: AddressLike,
    lockPeriod: BigNumberish,
    unlockTime: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    pair: string,
    lockPeriod: bigint,
    unlockTime: bigint
  ];
  export interface OutputObject {
    token: string;
    pair: string;
    lockPeriod: bigint;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UniswapHandler extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapHandler;
  waitForDeployment(): Promise<this>;

  interface: UniswapHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      lockPeriod: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  createPair: TypedContractMethod<
    [tokenAddress: AddressLike],
    [string],
    "nonpayable"
  >;

  getLiquidityInfo: TypedContractMethod<
    [tokenAddress: AddressLike],
    [
      [string, boolean, bigint, bigint] & {
        pair: string;
        isLocked: boolean;
        unlockTime: bigint;
        lpBalance: bigint;
      }
    ],
    "view"
  >;

  liquidityInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint] & {
        pair: string;
        isLocked: boolean;
        unlockTime: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pairExists: TypedContractMethod<
    [tokenAddress: AddressLike],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferLPTokens: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapFactoryAddress: TypedContractMethod<[], [string], "view">;

  uniswapRouterAddress: TypedContractMethod<[], [string], "view">;

  wethAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      lockPeriod: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createPair"
  ): TypedContractMethod<[tokenAddress: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getLiquidityInfo"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [
      [string, boolean, bigint, bigint] & {
        pair: string;
        isLocked: boolean;
        unlockTime: bigint;
        lpBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidityInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint] & {
        pair: string;
        isLocked: boolean;
        unlockTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairExists"
  ): TypedContractMethod<[tokenAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferLPTokens"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapFactoryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapRouterAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wethAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityLocked"
  ): TypedContractEvent<
    LiquidityLockedEvent.InputTuple,
    LiquidityLockedEvent.OutputTuple,
    LiquidityLockedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityLocked(address,address,uint256,uint256)": TypedContractEvent<
      LiquidityLockedEvent.InputTuple,
      LiquidityLockedEvent.OutputTuple,
      LiquidityLockedEvent.OutputObject
    >;
    LiquidityLocked: TypedContractEvent<
      LiquidityLockedEvent.InputTuple,
      LiquidityLockedEvent.OutputTuple,
      LiquidityLockedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
