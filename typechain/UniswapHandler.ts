/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface UniswapHandlerInterface extends utils.Interface {
  functions: {
    "addLiquidity(address,uint256,uint256,uint256)": FunctionFragment;
    "createPair(address)": FunctionFragment;
    "getLiquidityInfo(address)": FunctionFragment;
    "liquidityInfo(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairExists(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferLPTokens(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapFactoryAddress()": FunctionFragment;
    "uniswapRouterAddress()": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "createPair"
      | "getLiquidityInfo"
      | "liquidityInfo"
      | "owner"
      | "pairExists"
      | "renounceOwnership"
      | "transferLPTokens"
      | "transferOwnership"
      | "uniswapFactoryAddress"
      | "uniswapRouterAddress"
      | "wethAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createPair", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLiquidityInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairExists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferLPTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityAdded(address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityLocked(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LiquidityAddedEventObject {
  token: string;
  pair: string;
  amountToken: BigNumber;
  amountETH: BigNumber;
  liquidity: BigNumber;
}
export type LiquidityAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface LiquidityLockedEventObject {
  token: string;
  pair: string;
  lockPeriod: BigNumber;
  unlockTime: BigNumber;
}
export type LiquidityLockedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LiquidityLockedEventObject
>;

export type LiquidityLockedEventFilter = TypedEventFilter<LiquidityLockedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UniswapHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      lockPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    createPair(
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getLiquidityInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        pair: string;
        isLocked: boolean;
        unlockTime: BigNumber;
        lpBalance: BigNumber;
      }
    >;

    liquidityInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        pair: string;
        isLocked: boolean;
        unlockTime: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairExists(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferLPTokens(
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uniswapFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    uniswapRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidity(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    ethAmount: BigNumberish,
    lockPeriod: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  createPair(
    tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getLiquidityInfo(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber] & {
      pair: string;
      isLocked: boolean;
      unlockTime: BigNumber;
      lpBalance: BigNumber;
    }
  >;

  liquidityInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber] & {
      pair: string;
      isLocked: boolean;
      unlockTime: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pairExists(tokenAddress: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferLPTokens(
    tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uniswapFactoryAddress(overrides?: CallOverrides): Promise<string>;

  uniswapRouterAddress(overrides?: CallOverrides): Promise<string>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidity(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      lockPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPair(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getLiquidityInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        pair: string;
        isLocked: boolean;
        unlockTime: BigNumber;
        lpBalance: BigNumber;
      }
    >;

    liquidityInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        pair: string;
        isLocked: boolean;
        unlockTime: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pairExists(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferLPTokens(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapFactoryAddress(overrides?: CallOverrides): Promise<string>;

    uniswapRouterAddress(overrides?: CallOverrides): Promise<string>;

    wethAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LiquidityAdded(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      pair?: string | null,
      amountToken?: null,
      amountETH?: null,
      liquidity?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      token?: string | null,
      pair?: string | null,
      amountToken?: null,
      amountETH?: null,
      liquidity?: null
    ): LiquidityAddedEventFilter;

    "LiquidityLocked(address,address,uint256,uint256)"(
      token?: string | null,
      pair?: string | null,
      lockPeriod?: null,
      unlockTime?: null
    ): LiquidityLockedEventFilter;
    LiquidityLocked(
      token?: string | null,
      pair?: string | null,
      lockPeriod?: null,
      unlockTime?: null
    ): LiquidityLockedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addLiquidity(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      lockPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    createPair(
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getLiquidityInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairExists(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferLPTokens(
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uniswapFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      lockPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createPair(
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getLiquidityInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairExists(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferLPTokens(
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uniswapFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
